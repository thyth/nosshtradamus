# Automated build for Nosshtradamus binaries
#
# Includes go module workarounds for go-mosh and the mosh build.
#
# This only builds Linux amd64 binaries. Normally Go supports building for other OSes and architectures, but the go-mosh
# dependency requires building the mosh project, which is not so easy to cross compile. Similar steps to this pipeline
# have been used to build macOS binaries manually.

image: "ubuntu:jammy"

stages:
  - build

before_script:
  - apt-get update -qq
  # certs and git to pull another repo from gitlab.hive.thyth.com; swig and golang to build go-mosh (and nosshtradamus)
  - apt-get install -y -qq ca-certificates git swig golang-1.18
  # packages required to build mosh
  - apt-get install -y -qq autoconf make pkg-config libncurses-dev protobuf-compiler libprotobuf-dev zlib1g-dev libssl-dev
  # use clang instead of g++/gcc to build mosh/go-mosh and the cgo dependency in nosshtradamus
  - apt-get install -y -qq clang

build:
  stage: build
  script:
    # Delegate preparation of go-mosh, since the Go build process restricts what fetched modules can do when being built
    # by a downstream module (i.e. cannot automatically pull down a git submodule or invoke arbitrary scripting
    # commands. Since go-mosh is a SWIG wrapper around mosh (a C++ codebase), we need to bypass the normal Go build
    # fetching process and prepare this dependency directly.
    - CC="clang" CXX="clang++" PATH="/usr/lib/go-1.18/bin:$PATH" ./prepare-go-mosh.sh
    # Once go-mosh is properly prepared, we can do a mostly ordinary go build invocation.
    # Note: go toolchain environment seems to ignore the system cc/c++ and directly uses gcc/g++.
    - CC="clang" CXX="clang++" PATH="/usr/lib/go-1.18/bin:$PATH" go build ./cmd/nosshtradamus
  artifacts:
    paths:
      - nosshtradamus
