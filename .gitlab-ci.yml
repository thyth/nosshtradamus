# Automated build for Nosshtradamus binaries
#
# Includes go module workarounds for go-mosh and the mosh build.
#
# This only builds Linux amd64 binaries. Normally Go supports building for other OSes and architectures, but the go-mosh
# dependency requires building the mosh project, which is not so easy to cross compile. Similar steps to this pipeline
# have been used to build macOS binaries manually.

image: "ubuntu:eoan"

stages:
  - build_mosh
  - build

before_script:
  - apt-get update -qq
  # certs and git to pull another repo from gitlab.hive.thyth.com; swig and golang to build go-mosh (and nosshtradamus)
  - apt-get install -y -qq ca-certificates git swig golang-1.13
  # packages required to build mosh
  - apt-get install -y -qq autoconf pkg-config libncurses-dev protobuf-compiler libprotobuf-dev zlib1g-dev libssl-dev
  # use clang instead of g++/gcc to build mosh and the cgo dependency in nosshtradamus; set system compiler to clang
  - apt-get install -y -qq clang
  - update-alternatives --set c++ /usr/bin/clang++
  - update-alternatives --set cc /usr/bin/clang
  - update-alternatives --set c89 /usr/bin/clang
  - update-alternatives --set c99 /usr/bin/clang

# The Go build process restricts what fetched modules can do when being built by a downstream module. For example, they
# cannot automatically pull down a git submodule, or invoke arbitrary scripting commands. Since go-mosh is a SWIG
# wrapper around mosh (a C++ codebase) which results in static linking to mosh in downstream go artifacts, we need to
# bypass the normal Go build fetching process and build this dependency directly.
build_mosh:
  stage: build_mosh
  script:
    # extract the version of go-mosh used by nosshtradamus from the go.mod file
    - export GO_MOSH_VERSION=$(grep -oP "require gitlab.hive.thyth.com/chronostruct/go-mosh \Kv(.*)" go.mod)
    # create the go-mosh module directory
    - export GO_MOSH_DIR=modules/go/pkg/mod/gitlab.hive.thyth.com/chronostruct/go-mosh@${GO_MOSH_VERSION}
    - mkdir -p ${GO_MOSH_DIR}
    # checkout go-mosh project of the tagged version and the mosh submodule (as specified in the go-mosh repo)
    - git clone -b ${GO_MOSH_VERSION} https://gitlab.hive.thyth.com/chronostruct/go-mosh.git ${GO_MOSH_DIR}
    - git -C ${GO_MOSH_DIR} submodule update --init
    - export MOSH_DIR=${GO_MOSH_DIR}/mosh
    # build mosh
    - pushd ${MOSH_DIR} && ./autogen.sh ; popd
    - pushd ${MOSH_DIR} && ./configure ; popd
    - pushd ${MOSH_DIR} && make ; popd
    # compress artifacts (so only one file is copied between stage)
    - tar -cjf modules.tar.bz2 modules/
    - rm -Rf modules
  artifacts:
    paths:
      - modules.tar.bz2

# Since go-mosh (and the object files for mosh itself) have been generated by this point, nosshtradamus itself can be
# built using totally ordinary go build processes. SWIG will generate some warnings (suppression directive ineffective).
build:
  stage: build
  dependencies:
    - build_mosh
  script:
    - tar xf modules.tar.bz2
    - rm -Rf ${HOME}/go
    - mv modules/go ${HOME}/
    # go toolchain environment seems to ignore cc/c++ and directly uses gcc/g++; make it use system set compiler (clang)
    - CC="cc" CXX="c++" /usr/lib/go-1.13/bin/go build ./cmd/nosshtradamus
  artifacts:
    paths:
      - nosshtradamus
